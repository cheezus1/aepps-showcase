contract Showcase =

  type aepp_id = int

  type commitment_hash = int

  record vote = {
    commitment_hash : commitment_hash,
    amount : int }

  record vote_group = {
    voter_addresses : list(address),
    total_votes : int }

  record aepp = {
    image_binary : string,
    title : string,
    description : string,
    page_url : string }

  record pending_aepp = {
    aepp : aepp,
    deposit : int,
    submission_height : int,
    vote_reward_pool : int,
    voters : map(address, vote),
    submitted_votes : map(string, vote_group) }

  record user_balance = {
    voting_power : int,
    upvoting_power : int }

  record state = {
    pending : map(aepp_id, pending_aepp),
    approved : map(aepp_id, aepp),
    minimum_submission_deposit : int,
    approval_time_frame : int,
    vote_pool_percentage : int,
    vote_to_upvote_power_percentage : int,
    upvote_to_vote_power_percentage : int,
    balances : map(address, user_balance) }

  function init() =
    { pending = {},
      approved = {},
      // initial minimum deposit will be 1 ae
      minimum_submission_deposit = 1000000000000000000,
      approval_time_frame = 480,
      vote_pool_percentage = 70,
      vote_to_upvote_power_percentage = 25,
      upvote_to_vote_power_percentage = 70,
      balances = {} }

  public stateful function submit_aepp(image_binary : string,
    title : string, description : string, page_url : string) =

    let aepp_id : aepp_id = String.sha3(title)
    let aepp_listed : bool = Map.member(aepp_id, state.pending) || Map.member(aepp_id, state.approved)

    let input : list((string, string)) =
      [ (image_binary, "Image binary"),
        (title, "Title"),
        (description, "Description"),
        (page_url, "Page URL") ]

    validate_input(input)

    require(!aepp_listed, "aepp already submitted or approved")
    require(Call.value >= state.minimum_submission_deposit, "Submission deposit not high enough")

    let aepp = new_aepp(image_binary, title, description, page_url)
    let pending_aepp = new_pending_aepp(aepp)
    put(state{ pending[aepp_id] = pending_aepp })

  public stateful function vote(aepp_id : int, commitment_hash : commitment_hash) =
    require(Map.member(aepp_id, state.pending), "aepp not up for voting")
    require(!Map.member(Call.caller, state.pending[aepp_id].voters), "Address already voted")

    let updated_pending_aepp =
      state.pending[aepp_id]{
        vote_reward_pool @ v = v + Call.value,
        voters[Call.caller] = { commitment_hash = commitment_hash, amount = Call.value } }

    put(state{ pending[aepp_id] = updated_pending_aepp })

  public stateful function submit_commitment(aepp_id : aepp_id, vote : string, salt : string) =
    let approval_time_over : bool =
      state.pending[aepp_id].submission_height + state.approval_time_frame >= Chain.block_height

    let vote_submit_time_over : bool =
      Chain.block_height < state.pending[aepp_id].submission_height + 2 * state.approval_time_frame

    require(Map.member(aepp_id, state.pending), "aepp not up for voting")
    require(approval_time_over && !vote_submit_time_over, "aepp not up for commitment submission")
    require(Map.member(Call.caller, state.pending[aepp_id].voters), "Address not a voter for this aepp")
    require(vote == "yes" || vote == "no", "Invalid vote")

    let commitment_hash_check = String.sha3(String.concat(vote, salt))
    require(commitment_hash_check == state.pending[aepp_id].voters[Call.caller].commitment_hash, "Commitment hash mismatch")

    let updated_pending_aepp =
      state.pending[aepp_id]{submitted_votes[vote] @ v = v{total_votes @ tv = tv + state.pending[aepp_id].voters[Call.caller].amount} }

    put(state{ pending[aepp_id] = updated_pending_aepp })

  public stateful function finalize_aepp_vote(aepp_id : int) =
    let pending_aepp : pending_aepp = state.pending[aepp_id]

    require(pending_aepp.submission_height + state.approval_time_frame * 2 >=
      Chain.block_height, "aepp still up for voting")

    let new_pending = Map.delete(aepp_id, state.pending)
    put(state{pending = new_pending})

    let total_reward_pool = pending_aepp.vote_reward_pool + pending_aepp.deposit
    let reward_pool : int = percentage(total_reward_pool, state.vote_pool_percentage)
    let upvoting_power_pool : int = percentage(total_reward_pool, state.vote_to_upvote_power_percentage)
    let updater_reward : int = total_reward_pool - (reward_pool + upvoting_power_pool)
    Chain.spend(Call.caller, updater_reward)

    let winning_group : string =
      if(pending_aepp.submitted_votes["yes"].total_votes >= pending_aepp.submitted_votes["no"].total_votes)
        put(state{ approved[aepp_id] = pending_aepp.aepp })

        "yes"
      else
        // burn deposit or split among winners ?
        "no"

    grant_vote_rewards(pending_aepp.submitted_votes[winning_group].voter_addresses,
      pending_aepp.voters, reward_pool, upvoting_power_pool)

  private stateful function grant_vote_rewards(voter_addresses : list(address),
    voters : map(address, vote), reward_pool : int, upvoting_power_pool : int) =

    switch (voter_addresses)
      voter_address :: rest =>
        let voter_reward : int = (voters[voter_address].amount * 100) / reward_pool
        Chain.spend(voter_address, voter_reward)

        let upvoting_power_reward : int = (voters[voter_address].amount * 100) / upvoting_power_pool
        let new_balances = state.balances{[voter_address] @ b = b{upvoting_power @ u = u + upvoting_power_reward}}
        put(state{balances = new_balances})

        grant_vote_rewards(rest, voters, reward_pool, upvoting_power_pool)
      [] =>
        0

  private function new_aepp(image_binary : string,
    title : string, description : string, page_url : string) : aepp =

    { image_binary = image_binary,
      title = title,
      description = description,
      page_url = page_url }

  private function new_pending_aepp(aepp : aepp) =
    { aepp = aepp,
      deposit = Call.value,
      submission_height = Chain.block_height,
      vote_reward_pool = 0,
      voters = {},
      submitted_votes =
        { ["yes"] = {voter_addresses = [], total_votes = 0},
          ["no"] = {voter_addresses = [], total_votes = 0} } }

  private function percentage(value : int, percentage : int) : int =
    (value * percentage) / 100

  private function validate_input(values : list((string, string))) =
    switch(values)
      (str, message) :: rest =>
        require(str != "", String.concat(message, " cannot be empty!"))
        validate_input(rest)
      [] =>
        0

  private function require(b : bool, err : string) =
    if(!b)
      abort(err)
