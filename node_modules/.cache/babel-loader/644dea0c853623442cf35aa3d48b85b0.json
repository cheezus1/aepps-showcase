{"remainingRequest":"/home/boko/workspace/aepps-showcase/node_modules/babel-loader/lib/index.js!/home/boko/workspace/aepps-showcase/node_modules/eslint-loader/index.js??ref--13-0!/home/boko/workspace/aepps-showcase/src/util/contract_state.js","dependencies":[{"path":"/home/boko/workspace/aepps-showcase/src/util/contract_state.js","mtime":1548668088864},{"path":"/home/boko/workspace/aepps-showcase/node_modules/cache-loader/dist/cjs.js","mtime":1548314526195},{"path":"/home/boko/workspace/aepps-showcase/node_modules/babel-loader/lib/index.js","mtime":1548314526127},{"path":"/home/boko/workspace/aepps-showcase/node_modules/eslint-loader/index.js","mtime":1548314526431}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/home/boko/workspace/aepps-showcase/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n\nvar Crypto = require('@aeternity/aepp-sdk').Crypto;\n\nvar _require = require('@aeternity/aepp-sdk'),\n    EpochChain = _require.EpochChain,\n    EpochContract = _require.EpochContract;\n\nvar pendingType = \"map(int, \" + \"(\" + \"(string, string, string, string),\" + \"int,\" + \"int,\" + \"int,\" + \"map(address, (int, int)),\" + \"map(string, (list(address), int))\" + \")\" + \")\";\nvar approvedType = \"map(int, (string, string, string, string))\";\nvar contractAddress = \"ct_2hKcWQytJmNh6hUzAxsmmfam6EzTfVeVV8eKnbArDwf3A9877w\";\n\nvar getPending =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    var client, pending, decodedPending;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return EpochChain.compose(EpochContract)({\n              url: \"https://sdk-testnet.aepps.com\",\n              internalUrl: \"https://sdk-testnet.aepps.com\"\n            }).catch(console.error);\n\n          case 2:\n            client = _context.sent;\n            _context.next = 5;\n            return client.contractEpochCall(contractAddress, 'sophia-address', 'get_pending', '()').catch(console.error);\n\n          case 5:\n            pending = _context.sent;\n            _context.next = 8;\n            return client.contractEpochDecodeData(pendingType, pending.out).catch(console.error);\n\n          case 8:\n            decodedPending = _context.sent;\n            return _context.abrupt(\"return\", decodedPending);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getPending() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar pendingToObjects = function pendingToObjects(pending) {\n  var pendingObjects = [];\n  pending.value.forEach(function (p) {\n    lpendingObjects.push({\n      title: p.val.value[0].value[0].value,\n      description: p.val.value[0].value[1].value,\n      image_binary: p.val.value[0].value[2].value,\n      url: p.val.value[0].value[3].value\n    });\n  });\n};\n\nexport default {\n  getPending: getPending,\n  pendingToObjects: pendingToObjects\n};",{"version":3,"sources":["/home/boko/workspace/aepps-showcase/src/util/contract_state.js"],"names":["Crypto","require","EpochChain","EpochContract","pendingType","approvedType","contractAddress","getPending","compose","url","internalUrl","catch","console","error","client","contractEpochCall","pending","contractEpochDecodeData","out","decodedPending","pendingToObjects","pendingObjects","value","forEach","p","lpendingObjects","push","title","val","description","image_binary"],"mappings":";;;;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAAP,CAA+BD,MAA9C;;eACoCC,OAAO,CAAC,qBAAD,C;IAApCC,U,YAAAA,U;IAAYC,a,YAAAA,a;;AAEnB,IAAMC,WAAW,GACf,cACE,GADF,GAEI,mCAFJ,GAGI,MAHJ,GAII,MAJJ,GAKI,MALJ,GAMI,2BANJ,GAOI,mCAPJ,GAQE,GARF,GASA,GAVF;AAWA,IAAMC,YAAY,GAAG,4CAArB;AACA,IAAMC,eAAe,GAAG,uDAAxB;;AAEA,IAAMC,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACIL,UAAU,CAACM,OAAX,CAAmBL,aAAnB,EAAkC;AACjDM,cAAAA,GAAG,iCAD8C;AAEjDC,cAAAA,WAAW;AAFsC,aAAlC,EAGhBC,KAHgB,CAGVC,OAAO,CAACC,KAHE,CADJ;;AAAA;AACXC,YAAAA,MADW;AAAA;AAAA,mBAMOA,MAAM,CAACC,iBAAP,CAAyBT,eAAzB,EAA0C,gBAA1C,EAA4D,aAA5D,EAA2E,IAA3E,EAAiFK,KAAjF,CAAuFC,OAAO,CAACC,KAA/F,CANP;;AAAA;AAMTG,YAAAA,OANS;AAAA;AAAA,mBAOcF,MAAM,CAACG,uBAAP,CAA+Bb,WAA/B,EAA4CY,OAAO,CAACE,GAApD,EAAyDP,KAAzD,CAA+DC,OAAO,CAACC,KAAvE,CAPd;;AAAA;AAOTM,YAAAA,cAPS;AAAA,6CASRA,cATQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVZ,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAYA,IAAMa,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACJ,OAAD,EAAa;AAClC,MAAIK,cAAc,GAAG,EAArB;AACAL,EAAAA,OAAO,CAACM,KAAR,CAAcC,OAAd,CAAsB,UAASC,CAAT,EAAY;AAChCC,IAAAA,eAAe,CAACC,IAAhB,CAAqB;AACnBC,MAAAA,KAAK,EAAEH,CAAC,CAACI,GAAF,CAAMN,KAAN,CAAY,CAAZ,EAAeA,KAAf,CAAqB,CAArB,EAAwBA,KADZ;AAEnBO,MAAAA,WAAW,EAAEL,CAAC,CAACI,GAAF,CAAMN,KAAN,CAAY,CAAZ,EAAeA,KAAf,CAAqB,CAArB,EAAwBA,KAFlB;AAGnBQ,MAAAA,YAAY,EAAEN,CAAC,CAACI,GAAF,CAAMN,KAAN,CAAY,CAAZ,EAAeA,KAAf,CAAqB,CAArB,EAAwBA,KAHnB;AAInBb,MAAAA,GAAG,EAAEe,CAAC,CAACI,GAAF,CAAMN,KAAN,CAAY,CAAZ,EAAeA,KAAf,CAAqB,CAArB,EAAwBA;AAJV,KAArB;AAMD,GAPD;AASD,CAXH;;AAaA,eAAe;AACbf,EAAAA,UAAU,EAAVA,UADa;AACDa,EAAAA,gBAAgB,EAAhBA;AADC,CAAf","sourcesContent":["const Crypto = require('@aeternity/aepp-sdk').Crypto;\nconst {EpochChain, EpochContract} = require('@aeternity/aepp-sdk')\n\nconst pendingType =\n  \"map(int, \" +\n    \"(\" +\n      \"(string, string, string, string),\" +\n      \"int,\" +\n      \"int,\" +\n      \"int,\" +\n      \"map(address, (int, int)),\" +\n      \"map(string, (list(address), int))\" +\n    \")\" +\n  \")\";\nconst approvedType = \"map(int, (string, string, string, string))\";\nconst contractAddress = \"ct_2hKcWQytJmNh6hUzAxsmmfam6EzTfVeVV8eKnbArDwf3A9877w\";\n\nconst getPending = async () => {\n    let client = await EpochChain.compose(EpochContract)({\n        url: `https://sdk-testnet.aepps.com`,\n        internalUrl: `https://sdk-testnet.aepps.com`,\n    }).catch(console.error);\n\n    const pending = await client.contractEpochCall(contractAddress, 'sophia-address', 'get_pending', '()').catch(console.error);\n    const decodedPending = await client.contractEpochDecodeData(pendingType, pending.out).catch(console.error);\n\n    return decodedPending;\n  }\n\nconst pendingToObjects = (pending) => {\n    let pendingObjects = [];\n    pending.value.forEach(function(p) {\n      lpendingObjects.push({\n        title: p.val.value[0].value[0].value,\n        description: p.val.value[0].value[1].value,\n        image_binary: p.val.value[0].value[2].value,\n        url: p.val.value[0].value[3].value\n      });\n    });\n\n  }\n\nexport default {\n  getPending, pendingToObjects\n}\n"]}]}