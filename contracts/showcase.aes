contract Showcase =

  type aepp_ipfs_hash = string

  type commitment_hash = int

  record vote = {
    commitment_hash : commitment_hash,
    amount : int }

  record vote_group = {
    voter_addresses : list(address),
    total_votes : int }

  record pending_aepp_data = {
    owner : address,
    deposit : int,
    submission_height : int,
    vote_reward_pool : int,
    voters : map(address, vote),
    submitted_votes : map(string, vote_group) }

  record state = {
    pending : map(aepp_ipfs_hash, pending_aepp_data),
    approved : list(aepp_ipfs_hash),
    minimum_submission_deposit : int,
    approval_time_frame : int,
    vote_pool_percentage : int }

  function init() =
    { pending = {},
      approved = [],
      // initial minimum deposit will be 1 ae
      minimum_submission_deposit = 1000000000000000000,
      approval_time_frame = 480,
      vote_pool_percentage = 99 }

  public function get_pending() : map(aepp_ipfs_hash, pending_aepp_data) =
  	Map.from_list(Map.to_list(state.pending))

  public function get_approved() : list(aepp_ipfs_hash) =
  	state.approved

  public stateful function submit_aepp(aepp_ipfs_hash : aepp_ipfs_hash) =
    let aepp_listed : bool =
      Map.member(aepp_ipfs_hash, state.pending) || is_approved(aepp_ipfs_hash, state.approved)

    require(!aepp_listed, "aepp already submitted or approved")
    require(Call.value >= state.minimum_submission_deposit, "Submission deposit not high enough")

    let pending_aepp_data : pending_aepp_data = new_pending_aepp_data()
    put(state{ pending[aepp_ipfs_hash] = pending_aepp_data })

  public stateful function vote(aepp_ipfs_hash : aepp_ipfs_hash, commitment_hash : commitment_hash) =
    require(Map.member(aepp_ipfs_hash, state.pending), "aepp not up for voting")
    require(Call.caller != state.pending[aepp_ipfs_hash].owner, "Owner can't vote for himself")
    require(!Map.member(Call.caller, state.pending[aepp_ipfs_hash].voters), "Address already voted")

    let updated_pending_aepp =
      state.pending[aepp_ipfs_hash]{
        vote_reward_pool @ v = v + Call.value,
        voters[Call.caller] = { commitment_hash = commitment_hash, amount = Call.value } }

    put(state{ pending[aepp_ipfs_hash] = updated_pending_aepp })

  public stateful function submit_commitment(aepp_ipfs_hash : aepp_ipfs_hash, vote : string, salt : string) =
    require(Map.member(aepp_ipfs_hash, state.pending), "aepp not up for voting")

    let approval_time_over : bool =
      Chain.block_height > state.pending[aepp_ipfs_hash].submission_height + state.approval_time_frame

    let vote_submit_time_over : bool =
      Chain.block_height =< state.pending[aepp_ipfs_hash].submission_height + 2 * state.approval_time_frame

    require(approval_time_over && !vote_submit_time_over, "aepp not up for commitment submission")
    require(Map.member(Call.caller, state.pending[aepp_ipfs_hash].voters), "Address not a voter for this aepp")
    require(!has_submitted_vote(Call.caller, state.pending[aepp_ipfs_hash].submitted_votes[vote].voter_addresses),
      "Address already submitted a vote")
    require(vote == "approve" || vote == "reject", "Invalid vote")

    let commitment_hash_check : int = String.sha3(String.concat(vote, salt))
    require(commitment_hash_check == state.pending[aepp_ipfs_hash].voters[Call.caller].commitment_hash, "Commitment hash mismatch")

    let updated_voter_addresses : list(address) = Call.caller :: state.pending[aepp_ipfs_hash].submitted_votes[vote].voter_addresses
    let updated_total_votes : int =
      state.pending[aepp_ipfs_hash].submitted_votes[vote].total_votes + state.pending[aepp_ipfs_hash].voters[Call.caller].amount
    let updated_vote_group : vote_group =
      state.pending[aepp_ipfs_hash].submitted_votes[vote]{ voter_addresses = updated_voter_addresses, total_votes = updated_total_votes }
    let updated_submitted_votes : map(string, vote_group) = state.pending[aepp_ipfs_hash].submitted_votes{ [vote] = updated_vote_group }
    let updated_pending_aepp = state.pending[aepp_ipfs_hash]{ submitted_votes = updated_submitted_votes }

    put(state{ pending[aepp_ipfs_hash] = updated_pending_aepp })

  public stateful function finalize_voting(aepp_ipfs_hash : aepp_ipfs_hash) =
    let pending_aepp_data : pending_aepp_data = state.pending[aepp_ipfs_hash]

    require(pending_aepp_data.submission_height + state.approval_time_frame * 2 <
      Chain.block_height, "aepp still up for voting")

    let new_pending_data : map(aepp_ipfs_hash, pending_aepp_data) = Map.delete(aepp_ipfs_hash, state.pending)
    put(state{pending = new_pending_data})

    let winning_group : string =
      if(pending_aepp_data.submitted_votes["approve"].total_votes >= pending_aepp_data.submitted_votes["reject"].total_votes)
        Chain.spend(pending_aepp_data.owner, pending_aepp_data.deposit)
        put(state{ approved @ a = aepp_ipfs_hash :: a })

        "approve"
      else
        "reject"

    let total_reward_pool : int =
      switch(winning_group)
        "approve" =>
          pending_aepp_data.vote_reward_pool
        "reject"  =>
          pending_aepp_data.vote_reward_pool + pending_aepp_data.deposit

    let reward_pool : int = percentage(total_reward_pool, state.vote_pool_percentage)
    let updater_reward : int = total_reward_pool - reward_pool
    Chain.spend(Call.caller, updater_reward)

    grant_vote_rewards(pending_aepp_data.submitted_votes[winning_group].voter_addresses,
      pending_aepp_data.voters, reward_pool)

  private stateful function grant_vote_rewards(voter_addresses : list(address),
    voters : map(address, vote), reward_pool : int) =

    switch (voter_addresses)
      voter_address :: rest =>
        let voter_reward_percentage : int = (voters[voter_address].amount * 100) / reward_pool
        let voter_reward = percentage(reward_pool, voter_reward_percentage)
        Chain.spend(voter_address, voter_reward)

        grant_vote_rewards(rest, voters, reward_pool)
      [] =>
        0

  private function has_submitted_vote(voter : address, voter_addresses : list(address)) : bool =
    switch(voter_addresses)
      voter_address :: rest =>
        if(voter_address == voter)
          true
        else
          has_submitted_vote(voter, rest)
      [] =>
        false

  private function new_pending_aepp_data() =
    { owner = Call.caller,
      deposit = Call.value,
      submission_height = Chain.block_height,
      vote_reward_pool = 0,
      voters = {},
      submitted_votes =
        { ["approve"] = {voter_addresses = [], total_votes = 0},
          ["reject"] = {voter_addresses = [], total_votes = 0} } }

  private function percentage(value : int, percentage : int) : int =
    (value * percentage) / 100

  private function is_approved(aepp_ipfs_hash : aepp_ipfs_hash,
    approved_list : list(aepp_ipfs_hash)) : bool =

    switch(approved_list)
      hash :: rest =>
        if(aepp_ipfs_hash == hash)
          true
        else
          is_approved(aepp_ipfs_hash, rest)
      [] =>
        false

  private function require(b : bool, err : string) =
    if(!b)
      abort(err)
